%all==%all.tree:leaves

%all.tree==<<
%pytest.tree:leaves
%python3-xwl.whl

%pytest.tree==<<
%local-pytest.tree:leaves
%local.py.cov.checked

%local.py.cov.checked==%local-pys-to-cover:list.py+py_cov=(%local.py.cov):list.py3.cov.checked
%local-pys-to-cover==.:list
%local.py.cov==%local-pytest.tree:leaves:py3.cov.list:agg.py3.cov

%local-pytest.tree==<<
(xwl.py.test)+(%py-opts):py3.exec.cov
(wsgi.py.test)+(%py-opts):py3.exec.cov
(example.py.test)+(%py-opts)+cmd="8000":py3.exec.cov

%py-opts==<<
+py_sp=(..)
+mypy_plugin=(../mypy-plugins/json_codec_mypy_plugin.py)
+mypy_flags=--show-traceback




%publish-xwl-to-pypi! ==<<
(/tmp)+cmd=(%publish-xwl-to-pypi.sh)+cmd=(%python3-xwl.whl)+cmd=(%python3-xwl-twine.tar.gz):run

%publish-xwl-to-pypi.sh==!<<
#!/bin/sh -ex
whl="$1"
tgz="$2"
rm -rf dist && mkdir dist
cp $whl dist/xwl-1.0.2-py3-none-any.whl
cp $tgz dist/xwl-1.0.2.tar.gz
twine check dist/*
twine upload --verbose dist/*

%publish-xwl-to-testpypi! ==<<
(/tmp)+cmd=(%publish-xwl-to-testpypi.sh)+cmd=(%python3-xwl.whl)+cmd=(%python3-xwl-twine.tar.gz):run

%publish-xwl-to-testpypi.sh==!<<
#!/bin/sh -ex
whl="$1"
tgz="$2"
rm -rf dist && mkdir dist
cp $whl dist/xwl-1.0.2-py3-none-any.whl
cp $tgz dist/xwl-1.0.2.tar.gz
twine check dist/*
twine upload --verbose --repository pypitest dist/*

%python3-xwl.whl == %python3-xwl-whl.exec.files+member='xwl-1.0.2/dist/xwl-1.0.2-py3-none-any.whl':extract_file

# you'd think that the .tar.gz that the .whl was built from would be exactly the right thing to
# put on pypi...
%python3-xwl.tar.gz == %python3-xwl-tgz.exec.files+member='xwl-1.0.2.tar.gz':extract_file
# ... but no it needs the .tar.gz that it created when it created the wheel. It makes no sense
%python3-xwl-twine.tar.gz == %python3-xwl-whl.exec.files+member='xwl-1.0.2/dist/xwl-1.0.2.tar.gz':extract_file

%python3-xwl-tgz.exec.files==()+cmd=(%build-python3-xwl-tgz.sh)+cmd=(..) (../MIT-LICENCE) (README.rst) '1.0.2'+need=(%pytest.tree:leaves) :exec.files

%python3-xwl==()+cmd=(%build-python3-xwl.sh)+cmd=(.) (MIT-LICENCE) (README.rst) '1.0.2' +need=(%pytest.tree:leaves):exec.files

%python3-xwl-whl.exec.files==%build-python3-xwl-whl.sh+cmd=(%build-python3-xwl-whl.sh)+cmd=(%python3-xwl.tar.gz):exec.files

%build-python3-xwl-whl.sh==!<<YYYY
#!/bin/sh
set -ex
tgz="$1"
tar xzvf $tgz
cd xwl-1.0.2
python3 -m build -n
YYYY

%build-python3-xwl-tgz.sh==!<<XXXX
#!/bin/sh
set -ex
src_dir="$1"
licence="$2"
readme="$3"
rev="$4"
mkdir -p xwl-$rev/src
(
  cd $src_dir
  tar cf - xwl/*.py xwl/*.js xwl/*.py.test xwl/example/*.py xwl/example/*.html xwl/example/*.js xwl/example/1.svg.gz
) |
(cd xwl-$rev/src && tar xvf - )
touch xwl-$rev/src/xwl/py.typed
tests=$(cd xwl-$rev/src/xwl && find . -name '*.py.test')
tests_package_data=$(for t in $tests; do echo -n "\"$t\","; done)
cat > xwl-$rev/pyproject.toml <<EOF
[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"
[project]
name = "xwl"
version = "$rev"
description = "xwl library"
readme = "README.rst"
authors = [{ name = "Trevor Taylor"}]
license = { file = "MIT-LICENCE" }
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Development Status :: 5 - Production/Stable"
]
requires-python = ">=3.11"
dependencies = [ "xju>=2" ]
[project.urls]
Homepage = "https://github.com/urnest/urnest"
[tool.setuptools.packages.find]
where = ["src"]  # list of folders that contain the packages (["."] by default)
include = ["xwl","xwl.*","xwl.example.*"]  # package names should match these glob patterns (["*"] by default)
exclude = []  # exclude packages matching these glob patterns (empty by default)
namespaces = true  # to disable scanning PEP 420 namespaces (true by default)
[tool.setuptools.package-data]
xwl = [ $tests_package_data "./py.typed", "example/*", "./xwl.js" ]
EOF
cp $licence xwl-$rev/MIT-LICENCE
cp $readme xwl-$rev/README.rst
tar czf xwl-$rev.tar.gz xwl-$rev
XXXX
