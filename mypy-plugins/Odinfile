%all==%all.tree:leaves

%all.tree == <<
%plugin-type-checks.tree
%test_json_codec_errors
%test_json_codec_mypy_plugin_newtype
%test_json_codec_mypy_plugin_indexed
%test_json_codec_mypy_plugin_class
%test_json_codec_mypy_plugin_literal
%test_json_codec_mypy_plugin_union
%test_json_codec_mypy_plugin_alias
%test_json_codec_mypy_plugin_issue_2
%test_json_codec_mypy_plugin_issue_3
%test_json_codec_mypy_plugin_too_many_params
%test-members
%test-members-2
%test-jc
%test_xn_plugin
xn_mypy_plugin.py.test+(%py-opts)+py_sp=(.):py3.exec.cov

%py-opts==<<
+py_sp=(..)

%plugin-type-checks==%plugin-type-checks.tree:leaves

%plugin-type-checks.tree==<<
%typecheck_json_codec_plugin
%typecheck_cmc_plugin
%typecheck_xn_plugin

%typecheck_json_codec_plugin==json_codec_mypy_plugin.py+(%py-opts):main.mypy3
%typecheck_cmc_plugin==cmc_mypy_plugin.py+(%py-opts):main.mypy3
%typecheck_xn_plugin==xn_mypy_plugin.py+(%py-opts)+mypy_plugin='mypy.plugins.proper_plugin':main.mypy3

%verify-errs == ! <<
#!/bin/sh -ex
filename=$(cat "$1")
expect="$2"
# skip odin header (2 lines)
# and cover for python3.11->python3.12 <nothing> -> Never
tail -n +3 |
sed -e 's=[<]nothing[>]=Never=g' |
sed -e "s=$filename=FILE=g" |
    diff $expect -


%test_json_codec_errors==%test_json_codec_errors.errors+cmd=(%verify-errs) (test_data/json_codec_errors.py:filename) (%test_json_codec_errors.expect):exec.output

%test_json_codec_errors.expect==<<
FILE:14: error: Argument 1 to "encode" of "CodecProto" has incompatible type "str"; expected "int"  [arg-type]
FILE:16: error: Argument 1 to "encode" of "CodecProto" has incompatible type "str"; expected "bool"  [arg-type]
FILE:18: error: Argument 1 to "encode" of "CodecProto" has incompatible type "str"; expected "float"  [arg-type]
FILE:20: error: Argument 1 to "encode" of "CodecProto" has incompatible type "int"; expected "None"  [arg-type]
FILE:22: error: Argument 1 to "encode" of "CodecProto" has incompatible type "int"; expected "list[bool | dict[Any, Any] | list[Any] | float | str | None]"  [arg-type]
FILE:24: error: Argument 1 to "encode" of "CodecProto" has incompatible type "int"; expected "dict[str, bool | dict[Any, Any] | list[Any] | float | str | None]"  [arg-type]
FILE:26: error: Argument 1 to "encode" of "CodecProto" has incompatible type "int"; expected "set[bool | dict[Any, Any] | list[Any] | float | str | None]"  [arg-type]
FILE:28: error: Argument 1 to "encode" of "CodecProto" has incompatible type "int"; expected "str"  [arg-type]
FILE:30: error: Incompatible types in assignment (expression has type "int", variable has type "str")  [assignment]
FILE:32: error: Incompatible types in assignment (expression has type "bool", variable has type "str")  [assignment]
FILE:34: error: Incompatible types in assignment (expression has type "float", variable has type "str")  [assignment]
FILE:36: error: Incompatible types in assignment (expression has type "None", variable has type "str")  [assignment]
FILE:38: error: Incompatible types in assignment (expression has type "list[bool | dict[Any, Any] | list[Any] | float | str | None]", variable has type "str")  [assignment]
FILE:40: error: Incompatible types in assignment (expression has type "tuple", variable has type "str")  [assignment]
FILE:42: error: Incompatible types in assignment (expression has type "dict[str, bool | dict[Any, Any] | list[Any] | float | str | None]", variable has type "str")  [assignment]
FILE:44: error: Incompatible types in assignment (expression has type "set[bool | dict[Any, Any] | list[Any] | float | str | None]", variable has type "str")  [assignment]
FILE:46: error: Incompatible types in assignment (expression has type "str", variable has type "int")  [assignment]
FILE:47: error: Dict entry 0 has incompatible type "str": "str"; expected "int": "str"  [dict-item]
FILE:48: error: Dict entry 0 has incompatible type "str": "str"; expected "float": "str"  [dict-item]
FILE:49: error: Dict entry 0 has incompatible type "int": "str"; expected "bool": "str"  [dict-item]
FILE:50: error: Dict entry 0 has incompatible type "int": "str"; expected "None": "str"  [dict-item]
FILE:51: error: dict keys must be str,xju.newtype.Str or any union of int, float, bool, None, xju.newtype.Int, xju.newtype.Float, xju.newtype.Bool (not tuple)  [misc]
FILE:52: error: union dict key types must not be a mix of string-like ([builtins.str]) and non-string-like ([builtins.int])  [misc]
FILE:65: error: union dict key types must not be a mix of string-like ([json_codec_errors.NS]) and non-string-like ([json_codec_errors.NI, json_codec_errors.NF, json_codec_errors.NB, None])  [misc]
FILE:68: error: union dict key types must not be a mix of string-like ([builtins.str]) and non-string-like ([Union[builtins.int, builtins.bool]])  [misc]
FILE:80: error: union dict key types must not be a mix of string-like ([Literal[json_codec_errors.Pnum.b]]) and non-string-like ([builtins.int])  [misc]
FILE:81: error: union dict key types must not be a mix of string-like ([Literal[json_codec_errors.Pnum.b]]) and non-string-like ([Literal[json_codec_errors.Pnum.a]])  [misc]
FILE:82: error: dict keys must be str,xju.newtype.Str or any union of int, float, bool, None, xju.newtype.Int, xju.newtype.Float, xju.newtype.Bool (not builtins.list)  [misc]
FILE:83: error: dict keys must be str,xju.newtype.Str or any union of int, float, bool, None, xju.newtype.Int, xju.newtype.Float, xju.newtype.Bool (not builtins.list)  [misc]
FILE:84: error: dict keys must be str,xju.newtype.Str or any union of int, float, bool, None, xju.newtype.Int, xju.newtype.Float, xju.newtype.Bool (not builtins.set)  [misc]
FILE:85: error: dict keys must be str,xju.newtype.Str or any union of int, float, bool, None, xju.newtype.Int, xju.newtype.Float, xju.newtype.Bool (not builtins.set)  [misc]
FILE:86: error: dict keys must be str,xju.newtype.Str or any union of int, float, bool, None, xju.newtype.Int, xju.newtype.Float, xju.newtype.Bool (not tuple)  [misc]
FILE:87: error: dict keys must be str,xju.newtype.Str or any union of int, float, bool, None, xju.newtype.Int, xju.newtype.Float, xju.newtype.Bool (not builtins.dict)  [misc]
FILE:88: error: dict keys must be str,xju.newtype.Str or any union of int, float, bool, None, xju.newtype.Int, xju.newtype.Float, xju.newtype.Bool (not builtins.dict)  [misc]
FILE:89: error: dict keys must be str,xju.newtype.Str or any union of int, float, bool, None, xju.newtype.Int, xju.newtype.Float, xju.newtype.Bool (not builtins.bytes)  [misc]
FILE:98: error: dict keys must be str,xju.newtype.Str or any union of int, float, bool, None, xju.newtype.Int, xju.newtype.Float, xju.newtype.Bool (not json_codec_errors.FullName)  [misc]

%test_json_codec_errors.errors==test_data/json_codec_errors.py+(%py-opts)+mypy_flags=--show-traceback+mypy_plugin=(json_codec_mypy_plugin.py):main.mypy3:err

%test_json_codec_mypy_plugin_newtype==%test_json_codec_mypy_plugin_newtype.errors+cmd=(%verify-errs) (%json_codec_mypy_plugin_newtype.py.test:filename) (%test_json_codec_mypy_plugin_newtype.expect):exec.output

%test_json_codec_mypy_plugin_newtype.expect==<<
FILE:7: error: Argument 1 to "encode" of "CodecProto" has incompatible type "str"; expected "Nint"  [arg-type]
FILE:9: error: Incompatible types in assignment (expression has type "Nint", variable has type "str")  [assignment]

%test_json_codec_mypy_plugin_newtype.errors==%json_codec_mypy_plugin_newtype.py.test+(%py-opts)+mypy_flags=--show-traceback+mypy_plugin=(json_codec_mypy_plugin.py):main.mypy3:err

%json_codec_mypy_plugin_newtype.py.test == <<
from typing import NewType
from xju.json_codec import codec #, _xxx
#_xxx()
Nint=NewType("Nint",int)
c1=codec(Nint)
x = (c1.encode(Nint(7)),
     c1.encode("fred"))
r1:Nint=c1.decode(None)
r1x:str=c1.decode(None)  # ensure return type not inferred as Any

%test_json_codec_mypy_plugin_indexed==%test_json_codec_mypy_plugin_indexed.errors+cmd=(%verify-errs) (%json_codec_mypy_plugin_indexed.py.test:filename) (%test_json_codec_mypy_plugin_indexed.expect):exec.output

%test_json_codec_mypy_plugin_indexed.expect==<<
FILE:8: error: Argument 1 to "encode" of "CodecProto" has incompatible type "str"; expected "list[int]"  [arg-type]
FILE:10: error: Argument 1 to "encode" of "CodecProto" has incompatible type "None"; expected "set[str]"  [arg-type]
FILE:12: error: Argument 1 to "encode" of "CodecProto" has incompatible type "None"; expected "dict[str, int]"  [arg-type]
FILE:14: error: Argument 1 to "encode" of "CodecProto" has incompatible type "tuple[str, int]"; expected "tuple[str, int, float]"  [arg-type]
FILE:16: error: Incompatible types in assignment (expression has type "list[int]", variable has type "str")  [assignment]
FILE:18: error: Incompatible types in assignment (expression has type "set[str]", variable has type "str")  [assignment]
FILE:20: error: Incompatible types in assignment (expression has type "dict[str, int]", variable has type "str")  [assignment]
FILE:22: error: Incompatible types in assignment (expression has type "tuple[str, int, float]", variable has type "str")  [assignment]
FILE:23: error: TupleExpr:23(
  NameExpr(int [builtins.int])
  NameExpr(str [builtins.str])) is not valid as parameter to xju.json_codec.codec()  [misc]
FILE:23: error: Type application has too many types (1 expected)  [misc]
FILE:24: error: Type application has too many types (2 expected)  [misc]

%test_json_codec_mypy_plugin_indexed.errors==%json_codec_mypy_plugin_indexed.py.test+(%py-opts)+mypy_flags=--show-traceback+mypy_plugin=(json_codec_mypy_plugin.py):main.mypy3:err

%json_codec_mypy_plugin_indexed.py.test == <<
from xju.json_codec import codec #, _xxx
#_xxx()
c1=codec(list[int])
c2=codec(set[str])
c3=codec(dict[str,int])
c4=codec(tuple[str,int,float])
x = (c1.encode([7]),
     c1.encode("fred"),
     c2.encode({"fred"}),
     c2.encode(None),
     c3.encode({"fred":2}),
     c3.encode(None),
     c4.encode(("fred",2,3.2)),
     c4.encode(("fred",2)))
r1:list[int]=c1.decode(None)
r1x:str=c1.decode(None)  # ensure return type not inferred as Any
r2:set[str]=c2.decode(None)
r2x:str=c2.decode(None)  # ensure return type not inferred as Any
r3:dict[str,int]=c3.decode(None)
r3x:str=c3.decode(None)  # ensure return type not inferred as Any
r4:tuple[str,int,float]=c4.decode(None)
r4x:str=c4.decode(None)  # ensure return type not inferred as Any
e1=codec(list[int, str]) # not valid python
e2=codec(dict[int, str, float])  # not valid python

%test_json_codec_mypy_plugin_class==%test_json_codec_mypy_plugin_class.errors+cmd=(%verify-errs) (%json_codec_mypy_plugin_class.py.test:filename) (%test_json_codec_mypy_plugin_class.expect):exec.output

%test_json_codec_mypy_plugin_class.expect==<<
FILE:10: error: Argument 1 to "encode" of "CodecProto" has incompatible type "str"; expected "X"  [arg-type]
FILE:12: error: Incompatible types in assignment (expression has type "X", variable has type "int")  [assignment]
FILE:21: error: __main__.Fred.c type (def ()) is not encodable  [misc]
FILE:26: error: __main__.Fred.c type (def ()) is not encodable  [misc]

%test_json_codec_mypy_plugin_class.errors==%json_codec_mypy_plugin_class.py.test+(%py-opts)+mypy_flags=--show-traceback+mypy_plugin=(json_codec_mypy_plugin.py):main.mypy3:err

%json_codec_mypy_plugin_class.py.test == <<
from enum import Enum
from xju.json_codec import codec #, _xxx
from typing import Callable
class X(Enum):
    a="A"
    b="B"
    pass
c1=codec(X)
x = (c1.encode(X.a),
     c1.encode("fred"))
r1:X = c1.decode("A")
r1x:int = c1.decode("A")
class Fred:
    a: int
    b: str
    c: Callable[[], None]
    def __init__(self, a: int, b: str):
        self.a = a
        self.b = b
    def g(self): pass
codec(Fred)  # should not be encodable because of non-encodable c
class Jock(Fred):  # error: Fred not encodable
    def __init__(self, a: int, b: str, c:Callable[[],None]):
        super().__init__(a, b)
        self.c = c
codec(Jock)  # should not be encodable because of non-encodable Fred

%test_json_codec_mypy_plugin_literal==%test_json_codec_mypy_plugin_literal.errors+cmd=(%verify-errs) (%json_codec_mypy_plugin_literal.py.test:filename) (%test_json_codec_mypy_plugin_literal.expect):exec.output

%test_json_codec_mypy_plugin_literal.expect==<<
FILE:6: error: Parameter 1 of Literal[...] cannot be of type "float"  [valid-type]
FILE:9: error: Argument 1 to "encode" of "CodecProto" has incompatible type "Literal[7]"; expected "Literal['A']"  [arg-type]
FILE:11: error: Argument 1 to "encode" of "CodecProto" has incompatible type "Literal['fred']"; expected "Literal[7]"  [arg-type]
FILE:13: error: Argument 1 to "encode" of "CodecProto" has incompatible type "Literal[False]"; expected "Literal[True]"  [arg-type]
FILE:15: error: Incompatible types in assignment (expression has type "Literal['A']", variable has type "float")  [assignment]
FILE:19: error: Incompatible types in assignment (expression has type "Literal[True]", variable has type "list[Any]")  [assignment]

%test_json_codec_mypy_plugin_literal.errors==%json_codec_mypy_plugin_literal.py.test+(%py-opts)+mypy_flags=--show-traceback+mypy_plugin=(json_codec_mypy_plugin.py):main.mypy3:err

%json_codec_mypy_plugin_literal.py.test == <<
from typing import Literal
from xju.json_codec import codec #, _xxx
#_xxx()
A=Literal["A"]; c1=codec(A)
Seven=Literal[7]; c2=codec(Seven)
SevnPoint9=Literal[7.9]  # python does not allow
LiterallyTrue=Literal[True]; c4=codec(LiterallyTrue)
x = (c1.encode("A"),
     c1.encode(7),
     c2.encode(7),
     c2.encode("fred"),
     c4.encode(True),
     c4.encode(False))
r1:A = c1.decode(None)
r1x:float = c1.decode(None)
r2:Seven = c2.decode(None)
r2x:int = c2.decode(None)
r4:LiterallyTrue = c4.decode(None)
r4x:list = c4.decode(None)


%test_json_codec_mypy_plugin_union==%test_json_codec_mypy_plugin_union.errors+cmd=(%verify-errs) (%json_codec_mypy_plugin_union.py.test:filename) (%test_json_codec_mypy_plugin_union.expect):exec.output

%test_json_codec_mypy_plugin_union.expect==<<
FILE:9: error: Argument 1 to "encode" of "CodecProto" has incompatible type "dict[Never, Never]"; expected "int | str | list[bool | dict[Any, Any] | list[Any] | float | str | None]"  [arg-type]
FILE:11: error: Argument 1 to "encode" of "CodecProto" has incompatible type "Literal['C']"; expected "Literal['A', 'B']"  [arg-type]
FILE:13: error: Incompatible types in assignment (expression has type "int | str | list[bool | dict[Any, Any] | list[Any] | float | str | None]", variable has type "list[Any]")  [assignment]
FILE:15: error: Incompatible types in assignment (expression has type "Literal['A', 'B']", variable has type "list[Any]")  [assignment]

%test_json_codec_mypy_plugin_union.errors==%json_codec_mypy_plugin_union.py.test+(%py-opts)+mypy_flags=--show-traceback+mypy_plugin=(json_codec_mypy_plugin.py):main.mypy3:err

%json_codec_mypy_plugin_union.py.test == <<
from typing import Literal
from xju.assert_ import Assert
from xju.json_codec import codec#, _xxx
#_xxx()
c1=codec(int|str|list)
c2=codec(Literal["A","B"])
x = (c1.encode(7),
     c1.encode("fred"),
     c1.encode({}),
     c2.encode("A"),
     c2.encode("C"))
r1:int|str|list = c1.decode(None)
r1x:list = c1.decode(None)  # invalid, result might be e.g. a str
r2:Literal["A","B"] = c2.decode(None)
r2x:list = c2.decode(None)


%test_json_codec_mypy_plugin_alias==%test_json_codec_mypy_plugin_alias.errors+cmd=(%verify-errs) (%json_codec_mypy_plugin_alias.py.test:filename) (%test_json_codec_mypy_plugin_alias.expect):exec.output

%test_json_codec_mypy_plugin_alias.expect==<<
FILE:10: error: Argument 1 to "encode" of "CodecProto" has incompatible type "dict[Never, Never]"; expected "int | str"  [arg-type]
FILE:12: error: Incompatible types in assignment (expression has type "int | str", variable has type "str")  [assignment]

%test_json_codec_mypy_plugin_alias.errors==%json_codec_mypy_plugin_alias.py.test+(%py-opts)+mypy_flags=--show-traceback+mypy_plugin=(json_codec_mypy_plugin.py):main.mypy3:err

%json_codec_mypy_plugin_alias.py.test == <<
from typing import Literal
from xju.assert_ import Assert
from xju.json_codec import codec#, _xxx
#_xxx()
Y = int|str
X = Y
c1=codec(X)
x = (c1.encode(7),
     c1.encode("fred"),
     c1.encode({}))
r1:X = c1.decode(None)
r1x:str = c1.decode(None)  # invalid, result might be e.g. a int

%test_json_codec_mypy_plugin_issue_2==%test_json_codec_mypy_plugin_issue_2.errors+cmd=(%verify-errs) (%json_codec_mypy_plugin_issue_2.py.test:filename) (%test_json_codec_mypy_plugin_issue_2.expect):exec.output

%test_json_codec_mypy_plugin_issue_2.expect==<<
FILE:10: error: Argument 1 to "func" of "C1" has incompatible type "type[str]"; expected "type[int]"  [arg-type]

%test_json_codec_mypy_plugin_issue_2.errors==%json_codec_mypy_plugin_issue_2.py.test+(%py-opts)+mypy_flags=--show-traceback+mypy_plugin=(json_codec_mypy_plugin.py):main.mypy3:err

%json_codec_mypy_plugin_issue_2.py.test == <<
# https://github.com/urnest/urnest/issues/2
from typing import TypeVar, Generic, Type
from xju.json_codec import codec
ArgType = TypeVar("ArgType")
class C1(Generic[ArgType]):
    def func(self, argtype: Type[ArgType]):
        _argtype_codec = codec(argtype)  # should pass type, not instance
        pass
    pass
C1[int]().func(str)

%test_json_codec_mypy_plugin_issue_3==%test_json_codec_mypy_plugin_issue_3.errors+cmd=(%verify-errs) (%json_codec_mypy_plugin_issue_3.py.test:filename) (%test_json_codec_mypy_plugin_issue_3.expect):exec.output

%test_json_codec_mypy_plugin_issue_3.expect==<<
FILE:5: error: Argument 1 to "encode" of "CodecProto" has incompatible type "int"; expected "Timestamp"  [arg-type]

%test_json_codec_mypy_plugin_issue_3.errors==%json_codec_mypy_plugin_issue_3.py.test+(%py-opts)+mypy_flags=--show-traceback+mypy_plugin=(json_codec_mypy_plugin.py):main.mypy3:err

%json_codec_mypy_plugin_issue_3.py.test == <<
# https://github.com/urnest/urnest/issues/2
import xju.time
from xju.json_codec import codec
c=codec(xju.time.Timestamp)
c.encode(42)

%test_json_codec_mypy_plugin_too_many_params==%test_json_codec_mypy_plugin_too_many_params.errors+cmd=(%verify-errs) (%json_codec_mypy_plugin_too_many_params.py.test:filename) (%test_json_codec_mypy_plugin_too_many_params.expect):exec.output

%test_json_codec_mypy_plugin_too_many_params.expect==<<
FILE:3: error: Too many arguments for "codec"  [call-arg]

%test_json_codec_mypy_plugin_too_many_params.errors==%json_codec_mypy_plugin_too_many_params.py.test+(%py-opts)+mypy_flags=--show-traceback+mypy_plugin=(json_codec_mypy_plugin.py):main.mypy3:err

%json_codec_mypy_plugin_too_many_params.py.test == <<
# mypy checks param count before calling plugin
from xju.json_codec import codec
c=codec(int, 13)

# json_codec_mypy_plugin handles unqualified refs separate to qualified
# so augment the json_codec.py.test tests (which has mostly unqualified refs)
# with some qualified refs
%test-members==(%test_members.py)+(%py-opts)+py_sp=(%some_module_dir)+mypy_plugin=(json_codec_mypy_plugin.py):py3.exec.cov

%some_module.py==<<
from typing import TypeVar,Generic
from xju.json_codec import codec
import xju.time
T = TypeVar("T")
class C1(Generic[T]):
    x: T
    def __init__(self, x:T):
        self.x=x
codec(C1[int]).encode(C1(7))=={"x":7}
codec(C1[xju.time.Timestamp]).encode(C1(xju.time.Timestamp(3)))=={"x":7}
AY = int|str
AX = AY
AZ = AY | float

%test_members.py==<<
from xju.json_codec import codec,JsonType
import some_module
import xju.time
from typing import TypeVar,Type,Callable
ac=codec(some_module.AX)
codec(some_module.C1[int]).encode(some_module.C1(7))=={"x":7}
codec(some_module.C1[xju.time.Timestamp]).encode(some_module.C1(xju.time.Timestamp(3)))=={"x":7}
def c1(t: Type[some_module.T], g: Callable[[JsonType],None])->Callable[[some_module.T],None]:
    c=codec(t)
    def result(x: some_module.T) -> None:
        g(c.encode(x))
        pass
    return result
c1(int, lambda j: None)(7)
ac=codec(some_module.AX)
a1 = (ac.encode(7),
      ac.encode("fred"))
ra1:some_module.AX = ac.decode(7)
ra1 = ac.decode("fred")
zc = codec(some_module.AZ)
z1 = (zc.encode(7),
      zc.encode("fred"),
      zc.encode(22.8))

%some_module.virdir_spec==<<
%some_module.py==(.%some_module.py)

%some_module_dir==%some_module.virdir_spec:vir_dir


%test-members-2==(test_data/prog.py)+(%py-opts)+py_sp=(test_data)+mypy_plugin=(json_codec_mypy_plugin.py):py3.exec.cov
%test-jc==(test_data/test-jc.py)+(%py-opts)+py_sp=(test_data)+mypy_plugin=(json_codec_mypy_plugin.py):py3.exec.cov


%test_xn_plugin==%test_xn_plugin.errors+cmd=(%verify-errs) (test_data/xn_in_function_context_errors.py:filename) (%test_xn_plugin.expect):exec.output

%test_xn_plugin.expect==<<
FILE: note: In function "b":
FILE:9: error: fred not found  [misc]
FILE:9: error: Name "fred" is not defined  [name-defined]
FILE: note: In function "a":
FILE:15: error: a has no docstring  [misc]
FILE: note: In function "c":
FILE:24: error: 'd', 'i', 'p' are not valid (i.e. initialised) local variables/function parameters (i.e. each is not one of ['x']  [misc]
FILE: note: In function "cc":
FILE:33: error: 'y' is not a valid (i.e. initialised) local variable or a function parameter (i.e. not one of ['self', 'C', 'x']  [misc]
FILE:40: error: second parameter to in_function_context should be vars()  [misc]
FILE: note: In function "d":
FILE:63: error: 'e' is not a valid (i.e. initialised) local variable or a function parameter (i.e. not one of ['x']  [misc]
FILE: note: In function "gg":
FILE:84: error: 'q' is not a valid (i.e. initialised) local variable or a function parameter (i.e. not one of ['j', 'b', 'd', 'p', 'pp']  [misc]
FILE: note: In function "g":
FILE:124: error: 'e', 'f', 'u', 'v' are not valid (i.e. initialised) local variables/function parameters (i.e. each is not one of ['a', 'aa', 'b', 'c', 'd', 'j', 'm', 'p', 'pp', 't']  [misc]
FILE: note: In function "k":
FILE:135: error: 'b' is not a valid (i.e. initialised) local variable or a function parameter (i.e. not one of ['a', 'kk']  [misc]
FILE:137: error: 'a', 'b' are not valid (i.e. initialised) local variables/function parameters (i.e. each is not one of ['kk']  [misc]
FILE: note: In function "ll":
FILE:147: error: Incompatible types in string interpolation (expression has type "str", placeholder has type "int")  [str-format]
FILE:147: error: Incompatible types in string interpolation (expression has type "list[Any]", placeholder has type "int")  [str-format]

%test_xn_plugin.errors==(test_data/xn_in_function_context_errors.py)+(%py-opts)+mypy_flags=--show-traceback+mypy_plugin=(xn_mypy_plugin.py):main.mypy3:err

