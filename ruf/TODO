* parser:
  ~ new type Tag
    x risk of mixing up tag with something else seem minimal
  - should all parser creation functions (and parsers) accept an Option<Tag>?
    - maybe provide tagged_x for each function x?
    - maybe let common function put tag in (give Parser a tag() -> Option<Tag> method)?
      - yes, and only put in tags via tagged()
      
  x always return completed IRs on failure
    x with each context entry?
  - result cache
    Results=vec<hash_map<&Parser, ParseResult>> // same size as input str
    ParseResult={
       succeeded: bool,
       children: vec<(offset, &Parser)>  // note relative offset 
    }

    Parser.parse(at: &str[], results: mut &Results[]): ParseResult
    Parser.tag(): &str[] // static
    Parser.<<  // context or cause
    
  - primitives from hcp::parser:
    x none
    x listOf(open, x, sep, term)
    x match
    maybe nonEmptyListOf(x, moreflag)
    maybe not?
    maybe and/or &str
    maybe n_to_m (could use 0..3 * xx()?)
    x optional
    x PR parseAnyChar() throw();
x at_least_one
x zero_or_more
x one_of_chars like PR parseOneOfChars(hcp::Chars const& chars) throw();
x any_char_except like PR parseAnyCharExcept(hcp::Chars const& chars) throw();
x parse_x_until_y PR parseUntil(PR const match, PR const until) throw();
PR balanced(PR until, pairs, content) throw();
x whitespace_char like PR whitespaceChar() throw();
x PR digit() throw();
x PR octalDigit() throw();
x PR hexDigit() throw();
~ PR alpha() throw();
x PR cr() throw(); tagged(CR, literal("\r"));
x PR lf() throw();
x PR crlf() throw();
x PR usAsciiPrintable() throw(); // 32-127 per US ASCII, ANSI X3.4-1986 (ISO 646)
x some_space()
x any_space()

* tree:

  x rename it to ruf_tree,
  - publish to crates.io
    - need cargo build wrapper
      - let odin produce the package dynamically verify?
    - also do (first) ruf_assert (used by ruf_tree)
    
  - something better than Disposition? (bool, bool)? constants?
    default params?

  x add tests:
    x select_by_path
    x select by path via parent value
    x select by path via index (select rest)

  x css selector
	
  - more functions:
    children
    append_child
    prepend_child
    insert_before
    insert_after
    invert_selection?
    wrap?
    mut_selected_values?
      how to do lifetimes such that we can continue using selection
      once the values have been adjusted?

  / immutable Selection
    - instead of modify in place like prune, can produce a new tree with equivalent
      mods (e.g. by cloning tree and modifying via mutable selection)
  
- can't use assert for just anything? Do we need a proper, core-dump-always assert? yes
  - add all the assert functions from C++ xju::assert
  - also need abort on panic always on
  
- how to integrate with odin?
  - dependencies?
    x treat main file different to others? #[path] handling is tricky
    x use https://github.com/dtolnay/syn/blob/master/examples/dump-syntax/src/main.rs
      ... err, no because it expects well-formed source code and uses lots of other
      modules, maybe write a scanner in c++? Does that still have "bootstrap" trouble?
      should be able to avoid bootstrap trouble.
      https://doc.rust-lang.org/reference/ shows what scanner should
      consider; initially ignore any macros, but maybe support commonly used macros
    - rs.dg:
      :mod-deps
      :crate-deps
      :all-mod-deps
      :all-crate-deps
      :rlib
      :rexe => :exe
      :cargo
      
  - compile v link? (does it make any sense? Maybe with rlib?)
    so maybe:
      tree.rs produces tree.rlib crate
      html.rs uses tree.rlib crate and produces html.rlib
      ... does rustc html.rs only need tree.rlib? Yes.
    x so organise into libraries and link against them, can do
      local libraries
    - use that for downloaded stuff too)

  x rust-gdb via keystroke

- ruf_tagged
  - only need one struct, with conditional impls per the traits of the value type?
    e.g. if value type implements Add we implement Add to (redirecting); maybe use
    macros to make it managable?

- modules:
    https://www.sheshbabu.com/posts/rust-module-system

    It is a clear explanation of Rust's module system, so why is it still
    impossible to second guess?

    One problem is that in the explanation, it shows how to do [A]:
      main.rs =>
      routes/user_route.rs =>
      models/user_model.rs
    ... and it shows how to do [B]:
      main.rs =>
      config.rs
    ... but as soon as I try to do a multi-level equivalent [C]:
      main.rs =>
      config.rs =>
      log.rs
    ... um, err, it wants a declaration of log in config.rs, but there
    is nowhere to put it. You'd think that if main.rs declares config
    because it uses config, then config could declare log because it uses log.
    But apparently it can't? Another thought would be to declare it in the
    top-level mod.rs, but that is not read. It turns out that it does
    work if I declare the "transitively required" log module in the
    main.rs, but that goes against the grain somehow, because in the
    other example case [A] the transitively required is declared where it
    is required not somewhere else.

    So then we find https://doc.rust-lang.org/edition-guide/rust-2018/path-changes.html, which says:
    
      There's a root cause for why it's so confusing to many: while there are
      simple and consistent rules defining the module system, their
      consequences can feel inconsistent, counterintuitive and mysterious.

    ... which incidentally could be read as "all the users are wrong, what
    I've implemented is right", it just doesn't add up. Really, if the
    simple and consistent rules defining the module system cause such
    confusion, they're probably the wrong rules, throw them out.

    There is another possible root cause: that the simple and consistent
    rules defining the module system are simply and consistently not
    documented. So when I get into the above situation there's no
    description I can follow that allows me to step through as the
    compiler would.


    Like others here I came unstuck with rust modules. I read the nice
    section in the rust book but when I tried to apply what I read
    I quickly got into trouble and the book didn't seem to help. A web
    search suggested I wasn't the only one to get into trouble, but nothing
    I found gave me the info I needed to see where I was going wrong.
    
    With head scratching and experimentation and re-reading I think I
    see it now so will try to write it down and ask "is this correct?":

      The rust compiler works from a single source file - the "crate root"
      file - and builds something. For example "rustc server.rs" builds an
      executable from the server.rs crate root file.
      
      Rust code in the crate root file can use modules defined elsewhere,
      either "local" modules - defined in other local source files - or
      "external" modules.

      For "external" modules, you tell the compiler what "crates" they are
      in and where to find those crates. ("What" either by "extern crate x;"
      statements in the crate root file or other local source files,
      or implicitly via "use ::" statements. "Where" via compiler options
      -L, --extern).

      "Local" modules must be "introduced" to rustc via "mod" statements.
      *Where* rustc looks for those modules' source code takes a bit
      of explaining.

      First, the crate root file must explicitly list - i.e. introduce -
      via mod statements all the top level modules that contain local
      code for the run of rustc. By default rustc expects the source code for
      those modules to be in the same directory as the crate root file
      itself, e.g. if we have crate root file /x/y/main.rs that says:

         mod fred;

      ... then "rustc /x/y/main.rs" will expect the code for module fred
      to be in /x/y, as either /x/y/fred.rs or the out-of-favour
      /x/y/fred/mod.rs.

      Once we put "mod fred;" in main.rs, main.rs can happily refer to code
      in module fred, e.g. "fred::f1()". Module fred can (and must) introduce
      its child modules via e.g. "mod jude; mod jock;", but cannot introduce
      grand-children or sibling modules:
      
      - only a child module's parent module can introduce siblings of the
      child module; top level modules are not "child modules"

      - only the crate root file can introduce top level modules
      (This can seem anomolous in a sense because my crate root file's top
      level modules can be children - descendants - of another crate root
      file's top level modules.)

      There is another seeming anomoly: a child module
      can "use" ancestors and their siblings and children even though it
      can't introduce them. It's not untill we come across the
      #[path] facility that this "limitation" makes sense.

      So what does #[path] do? Well, *by default* rustc expects our top
      level module's source code (e.g. fred.rs) to be in the same directory as
      the crate root file. But the crate root file (and only the crate root
      file) can override that default location using #[path]. For example:
      
        #[path "/somewhere/else/the_real_fred/mod.rs"]
	mod fred;

      ... will make rustc, when looking for fred, ignore the directory of the
      crate root file and use /somewhere/else/the_real_fred/mod.rs as the
      code for fred. rustc also then looks for fred's child modules
      in /somewhere/else, e.g. /somewhere/else/jude.rs and
      /somewhere/else/jock/mod.rs.

      That perhaps reveals why a child module cannot introduce its
      siblings: if rustc allowed it there could be ambiguity over where
      to find that module.

      Note that modules themselves can use #[path] when introducing their
      children.

      There is one more catch:

        #[path fred=/somewhere/else/the_real_fred.rs]
	mod fred;

      ... in my crate root file did not work. I expected it to make
      rustc look for my 2nd level modules in /somewhere/else/the_real_fred/
      but it did not. It insisted that I use:

        #[path fred=/somewhere/else/the_real_fred/mod.rs]
	mod fred;

      This might just be a limitation of the rustc version I was
      using, 1.41.1, in any case it does not inhibit my use of rustc.

      Note also that unlike say python or C++, there are no compiler options
      or environment variables to tell rustc where to find the code for
      local modules.

  Did I get that right? Have I missed anything?
  

      Simple, isn't it?

      Note that the fact that fred.rs cannot introduce
      siblings or ancestors or grand-descendants is
      seemingly never pointed out clearly in the official documentation nor
      (as far as I can find) unofficial how-tos, tutorials, faqs, forums.
      For me this omission caused days of head-scratching and I imagine
      is behind some of the fustrated questions on the net. But rust
      has enough unique valuable features that I will get over it (e.g.
      lifetime checking - just that one is enough).

      I have come to terms with rust modules by keeping executables and
      libraries separated, e.g. if I was to write an ssh implementation
      I would do it as an ssh library "crate" plus a separate "crate"
      with client and server programs (each built from a single file).
      The modules system isn't so confusing then.

- mio has select, rustls, serde-json, websocket
  - learn websocket protocol

- packages for:
  crypto (like gcrypt)
  base64
  http
  snmp
