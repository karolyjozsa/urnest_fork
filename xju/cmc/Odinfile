%all==%all.tree:leaves

%all.tree==<<
(io%all)
%unit-tests.tree:leaves
%all.cov.checked

%all.cov.checked==%pys-to-cover:list.py+py_cov=(%all.cov):list.py3.cov.checked
%pys-to-cover==.:list:ls+cmd=grep -E -v "'newtype.template.py'":stdout:list
%all.cov==%unit-tests.tree:leaves:py3.cov.list:agg.py3.cov

%unit-tests.tree==<<
cmc.py.test+(%py-opts):py3.exec.cov
cmclass.py.test+(%py-opts):py3.exec.cov
async_cmclass.py.test+(%py-opts):py3.exec.cov
delay_cancellation.py.test+(%py-opts):py3.exec.cov
Dict.py.test+(%py-opts):py3.exec.cov
Opt.py.test+(%py-opts):py3.exec.cov
AsyncDict.py.test+(%py-opts):py3.exec.cov
AsyncOpt.py.test+(%py-opts):py3.exec.cov
signal.py.test+(%py-opts):py3.exec.cov
sockets.py.test+(%py-opts):py3.exec.cov
tstore.py.test+(%py-opts):py3.exec.cov
perflog.py.test+(%py-opts):py3.exec.cov
ThreadMutexLockCondition.py.test+(%py-opts):py3.exec.cov
Process.py.test+(%py-opts):py3.exec.cov
AsyncTaskMutexLockCondition.py.test+(%py-opts):py3.exec.cov
AsyncServiceQueue.py.test+(%py-opts):py3.exec.cov

%py-opts==<<
+(..%py-opts)


# run unit tests against pip-installed code rather than local source
%pytest-v-installed==%pytest-v-installed.tree:leaves

%pytest-v-installed.tree==<<
%installed-cov
io%installed-cov

# run unit tests against pip-installed code rather than local source
%installed-cov==%unit-tests-v-installed.tree:leaves:py3.cov.list:agg.py3.cov

%unit-tests-v-installed.tree==<<
cmc.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
async_cmclass.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
Dict.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
Opt.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
AsyncDict.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
AsyncOpt.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
signal.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
tstore.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
perflog.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
ThreadMutexLockCondition.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
AsyncServiceQueue.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov

