%all==%all.tree:leaves

%all.tree==<<
%tests.tree
base64%tests.tree
file%tests.tree
io%tests.tree
ip%tests.tree
json%tests.tree
net%tests.tree
crypt%tests.tree
set%tests.tree
snmp%tests.tree
ssh%tests.tree
uri%tests.tree
utf8%tests.tree
test%tests.tree
%tags



%tests.tree == <<
()+cmd=(%test-doCmd):exec.output
()+cmd=(test-Array.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-AutoFd.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-ByteBuffer.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Condition.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-EventClient.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Exception.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Float.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Holder.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Int.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-JoiningIterator.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-MemIBuf.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-MemOBuf.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-MinAlign.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-MMap.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Notifying.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-NotifyingList.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Observer.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-ObserverP.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Optional.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Ring.cxx+(..%cxx-opts)+o_src_suffix=.cc .cxx:auto.cxx.exe):exec.output
()+cmd=(test-Subprocess.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Thread.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Traced.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-Utf8String.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-check_types_related.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-countSignificantBits.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-endsWith.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-eternity.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-file.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-format.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-functional.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-io.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-ip.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-path.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-pipe.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-readThrough.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-seq_less.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-split.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-startsWith.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-stringToDouble.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-stringToFloat.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-stringToInt.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-stringToTime.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-stringToUInt.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-strip.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-syscall.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-unix_epoch.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=(test-xml.cc+(..%cxx-opts):auto.cxx.exe):exec.output
()+cmd=test '-s' (%test-check_types_related_2_err):exec.output
()+cmd=(print-wordsizes.cc+(..%cxx-opts):auto.cxx.exe):exec.output
netflow%tests.tree
%pytest.tree:leaves

%pytest.tree==<<
%local-pytest.tree:leaves
%local.py.cov.checked
cmc%all.tree:leaves
mypy-error-tests%all.tree:leaves

%local.py.cov.checked==%local-pys-to-cover:list.py+py_cov=(%local.py.cov):list.py3.cov.checked
%local-pys-to-cover==.:list:ls+cmd=grep -E -v "'newtype.template.py'":stdout:list
%local.py.cov==%local-pytest.tree:leaves:py3.cov.list:agg.py3.cov

%local-pytest.tree==<<
(assert_.py.test)+(%py-opts):py3.exec.cov
(cmd.py.test)+(%py-opts):py3.exec.cov
(jsonschema.py.test)+(%py-opts):py3.exec.cov
(json_codec.py.test)+(%py-opts):py3.exec.cov
(misc.py.test)+(%py-opts):py3.exec.cov
(patch.py.test)+(%py-opts):py3.exec.cov
(pq.py.test)+(%py-opts):py3.exec.cov
(rfc2616.py.test)+(%py-opts):py3.exec.cov
(xn.py.test)+(%py-opts):py3.exec.cov
(newtype.py.test)+(%py-opts):py3.exec.cov
(time.py.test)+(%py-opts):py3.exec.cov
(make-json-codec-ts-test)+(%py-opts):py3.exec.cov

%py-opts==<<
+py_sp=(..)
+mypy_plugin=(../mypy-plugins/json_codec_mypy_plugin.py)
+mypy_plugin=(../mypy-plugins/cmc_mypy_plugin.py)
+mypy_flags=--show-traceback
+need=(../mypy-plugins%plugin-type-checks)

%test-check_types_related_2_err==test-check_types_related_2.cc+(..%cxx-opts):auto.cxx.exe:err

%test-doCmd==test-doCmd.cc+(..%cxx-opts):auto.cxx.exe

%stress-test-doCmd! == (.)+cmd=(%repeat-test.sh) '1000' (%test-doCmd) :run

%repeat-test.sh == ! <<
#!/bin/sh
count="$1" && shift &&
echo "$count x " "$@" &&
i=0 &&
while [ $? = 0 ] && [ $i != $count ]
do
  "$@" &&
  i=$((i+1))
done

%hcp-opts == <<
+(..%hcp-opts)

%hcp-gen==%hcp-gen.vir_dir_specs:list:cat:vir_dir

%hcp-gen.vir_dir_specs==<<
%hcp-local-spec
%hcp-subdir-spec

%hcp-local-spec==.:dir.hcp.list+(%hcp-opts)+hpath='xju':hcp-split-virdir-specs:cat

%hcp-subdir-spec==<<
%base64==./base64/Odinfile%hcp-gen
%file==./file/Odinfile%hcp-gen
%http==./http/Odinfile%hcp-gen
%io==./io/Odinfile%hcp-gen
%ip==./ip/Odinfile%hcp-gen
%json==./json/Odinfile%hcp-gen
%linux==./linux/Odinfile%hcp-gen
%crypt==./crypt/Odinfile%hcp-gen
%net==./net/Odinfile%hcp-gen
%netflow==./netflow/Odinfile%hcp-gen
%set==./set/Odinfile%hcp-gen
%snmp==./snmp/Odinfile%hcp-gen
%ssh==./ssh/Odinfile%hcp-gen
%test==./test/Odinfile%hcp-gen
%tls==tls/Odinfile%hcp-gen
%uri==./uri/Odinfile%hcp-gen
%utf8==./utf8/Odinfile%hcp-gen

%test-getHostName==()+cmd=(%test-getHostName.sh) (test-getHostName.cc+(..%cxx-opts):auto.cxx.exe):exec.output

%test-getHostName.sh == ! <<
#!/bin/sh
"$1" $(hostname)

%idl-gen==%idl-gen.vir_dir_specs:list:cat:vir_dir

%idl-gen.vir_dir_specs==<<
%idl-local-spec
%idl-subdir-spec

%hcp-opts==<<
+(..%hcp-opts)

%idl-local-spec==.:dir.idl.list+(%hcp-opts)+hpath='xju':omnicxy.virdir-specs:cat

%idl-subdir-spec==<<
%linux==./linux/Odinfile%idl-gen

%tags==%all.list-of-tags+(..%tags-opts):merged-tags

%all.list-of-tags==<<
.+(..%tags-opts):merged-tags
base64%tags
ethernet%tags
file%tags
http%tags
io%tags
ip%tags
json%tags
linux%tags
crypt%tags
net%tags
netflow%tags
set%tags
snmp%tags
ssh%tags
test%tags
tls%tags
uri%tags
utf8%tags

newtype.py==()+(%py-opts)+cmd=(%make-newtype.py)+cmd=(newtype.py.template):py3.stdout

%make-newtype.py==!<<
#/usr/bin/env python3
import sys
int_methods=''
rem=set(dir(int))
for n in ['__abs__','__invert__', '__neg__','__pos__']:
    rem.remove(n)
    int_methods=int_methods+f'''
    def {n}(self) -> Self:
        return self.__class__(self.value().{n}())'''
for n in ['__int__', '__sizeof__', 'bit_count', 'bit_length','__index__','__hash__']:
    rem.remove(n)
    int_methods=int_methods+f'''
    def {n}(self)->int:
        return self.value().{n}()'''
for n in ['__bool__']:
    rem.remove(n)
    int_methods=int_methods+f'''
    def {n}(self)->bool:
        return self.value().{n}()'''
for n in ['__ror__', '__rrshift__', '__lshift__', '__rlshift__', '__rshift__']:
    rem.remove(n)
    int_methods=int_methods+f'''
    def {n}(self,n:int) -> Self:
        return self.__class__(self.value().{n}(n))'''
for n in ['__gt__', '__lt__', '__le__', '__ge__']:
    rem.remove(n)
    int_methods=int_methods+f'''
    def {n}(self,other:Self)->bool:
        return self.value().{n}(other.value())'''
for n in ['__add__', '__sub__', '__and__', '__or__','__xor__']:
    rem.remove(n)
    int_methods=int_methods+f'''
    def {n}(self,other:Self)->Self:
        if type(other) is not type(self):
            return NotImplemented
        return self.__class__(self.value().{n}(other.value()))'''
for n in ['as_integer_ratio']:
    rem.remove(n)
    int_methods=int_methods+f'''
    def {n}(self)->Tuple[int,int]:
        return self.value().{n}()'''
for n in ['__rpow__', '__dir__', '__rand__', '__reduce__', '__rxor__', '__pow__', '__str__', '__init_subclass__', '__reduce_ex__', '__getattribute__', '__doc__', '__setattr__', 'denominator', '__init__', '__delattr__', 'from_bytes', '__float__', '__format__', 'to_bytes', '__class__', '__repr__', '__new__', '__getnewargs__', 'numerator','real', '__subclasshook__','imag','conjugate', '__floordiv__','__rfloordiv__','__divmod__','__rdivmod__','__truediv__','__rtruediv__', '__mul__', '__rmul__', '__rmod__','__mod__','__eq__','__ne__','__round__','__radd__','__rsub__', '__trunc__','__ceil__','__floor__']:
    rem.remove(n)
    # i functions not implemented or hand-coded
if 'is_integer' in rem: rem.remove('is_integer') # python 3.12 and above
if '__getstate__' in rem: rem.remove('__getstate__')  # python 3.11 and above
if '__setformat__' in rem: rem.remove('__setformat__')  # python 3.10
assert len(rem)==0,rem
float_methods=''
rem=set(dir(float))
for n in ['__abs__','__neg__','__pos__', '__trunc__', '__ceil__','__floor__']:
    rem.remove(n)
    float_methods=float_methods+f'''
    def {n}(self)->Self:
        return self.__class__(self.value().{n}())'''
for n in ['__sizeof__','__hash__']:
    rem.remove(n)
    float_methods=float_methods+f'''
    def {n}(self)->int:
        return self.value().{n}()'''
for n in ['__bool__','is_integer']:
    rem.remove(n)
    float_methods=float_methods+f'''
    def {n}(self)->bool:
        return float(self.value()).{n}()'''
for n in ['__gt__', '__lt__', '__le__', '__ge__']:
    rem.remove(n)
    float_methods=float_methods+f'''
    def {n}(self,other:Self)->bool:
        return self.value().{n}(other.value())'''
for n in ['__add__', '__sub__']:
    rem.remove(n)
    float_methods=float_methods+f'''
    def {n}(self,other:Self)->Self:
        if type(other) is not type(self):
            return NotImplemented
        return self.__class__(self.value().{n}(other.value()))'''
for n in ['as_integer_ratio']:
    rem.remove(n)
    float_methods=float_methods+f'''
    def {n}(self)->Tuple[float,float]:
        return self.value().{n}()'''
for n in ['__rpow__', '__dir__', '__reduce__', '__pow__', '__str__', '__init_subclass__', '__reduce_ex__', '__getattribute__', '__doc__', '__setattr__', '__init__', '__delattr__', '__float__', '__format__', '__class__', '__repr__', '__new__', '__getnewargs__','real', '__subclasshook__','imag','fromhex', 'hex', '__int__', '__getformat__','__mod__', '__floordiv__','__truediv__', '__mul__', '__rtruediv__', '__rmul__', '__rmod__', 'conjugate', '__divmod__', '__rdivmod__','__round__', '__rsub__', '__radd__', '__rfloordiv__', '__eq__', '__ne__']:
    rem.remove(n)
    # i functions not implemented or hand-coded
if '__getstate__' in rem: rem.remove('__getstate__')  # python 3.11 and above
if '__setformat__' in rem: rem.remove('__setformat__')  # python 3.10
assert len(rem)==0,rem
rem=set(dir(str))
str_methods=''
for n in ['__setattr__', '__repr__', '__reduce_ex__', '__init__', '__getattribute__', '__class__', '__init_subclass__', '__doc__', '__dir__', '__getnewargs__', '__iter__', '__subclasshook__', '__new__', '__str__', '__reduce__', 'encode', 'splitlines','__contains__','maketrans','__format__','join','__mod__','zfill','format_map','__delattr__','format','expandtabs','__rmod__', '__eq__', '__ne__','__getitem__', '__rmul__']:
    rem.remove(n)
    # n not implemented or hand-coded
if '__getstate__' in rem: rem.remove('__getstate__')  # python 3.11 and above
if '__setformat__' in rem: rem.remove('__setformat__')  # python 3.10
for n in ['capitalize','lower', 'swapcase', 'title', 'casefold','upper']:
    rem.remove(n)
    str_methods=str_methods+f'''
    def {n}(self)->Self:
        return self.__class__(self.value().{n}())'''
for n in ['__len__', '__sizeof__','__hash__']:
    rem.remove(n)
    str_methods=str_methods+f'''
    def {n}(self)->int:
        return self.value().{n}()'''
for n in ['isalnum', 'isdecimal', 'isidentifier', 'isprintable', 'isascii', 'islower', 'isnumeric', 'isspace', 'isupper', 'isalpha', 'isdigit', 'istitle']:
    rem.remove(n)
    str_methods=str_methods+f'''
    def {n}(self)->bool:
        return self.value().{n}()'''
for n in ['__mul__']:
    rem.remove(n)
    str_methods=str_methods+f'''
    def {n}(self,n:int)->Self:
        return self.__class__(self.value().{n}(n))'''
for n in ['__gt__', '__lt__', '__le__', '__ge__']:
    rem.remove(n)
    str_methods=str_methods+f'''
    def {n}(self,other:Self)->bool:
        return self.value().{n}(other.value())'''
for n in ['__add__']:
    rem.remove(n)
    str_methods=str_methods+f'''
    def {n}(self,other:Self)->Self:
        if type(other) is not type(self):
            return NotImplemented
        return self.__class__(self.value().{n}(other.value()))'''
for n in ['rfind', 'find', 'rindex', 'index', 'count', 'translate']:
    rem.remove(n)
    str_methods=str_methods+f'''
    @overload
    def {n}(self, sub:str) -> int:
        pass
    @overload
    def {n}(self, sub:str, start:int)->int:
        pass
    @overload
    def {n}(self, sub:str, start:int, end:int)->int:
        pass
    def {n}(self, *args:Any, **kwargs:Any) -> Any:
        return self.value().{n}(*args)'''
for n in ['endswith', 'startswith']:
    rem.remove(n)
    str_methods=str_methods+f'''
    @overload
    def {n}(self, s:str) -> bool:
        pass
    @overload
    def {n}(self, s:str, start:int)->bool:
        pass
    @overload
    def {n}(self, s:str, start:int, end:int)->bool:
        pass
    def {n}(self, *args:Any, **kwargs:Any) -> Any:
        return self.value().{n}(*args)'''
for n in ['strip', 'lstrip', 'rstrip']:
    rem.remove(n)
    str_methods=str_methods+f'''
    def {n}(self, chars:str|None=None)->Self:
        return self.__class__(self.value().{n}(chars))'''
for n in ['replace']:
    rem.remove(n)
    str_methods=str_methods+f'''
    def {n}(self, old:str, new:str, count:int=-1)->Self:
        return self.__class__(self.value().{n}(old,new,count))'''
for n in ['split', 'rsplit']:
    rem.remove(n)
    str_methods=str_methods+f'''
    def {n}(self, sep:Optional[str]=None, max_split:int=-1)->List[str]:
        return self.value().{n}(sep,max_split)'''
for n in ['partition','rpartition']:
    rem.remove(n)
    str_methods=str_methods+f'''
    def {n}(self,sep:str) -> Tuple[str,str,str]:
        return self.value().{n}(sep)'''
for n in ['removeprefix','removesuffix']:
    rem.remove(n)
    str_methods=str_methods+f'''
    def {n}(self,sub:str)->Self:
        return self.__class__(self.value().{n}(sub))'''
for n in ['center','ljust','rjust']:
    rem.remove(n)
    str_methods=str_methods+f'''
    def {n}(self,width:int,fillchar:str=' ')->Self:
        return self.__class__(self.value().{n}(width,fillchar))'''
assert rem==set()
bool_methods=''
rem=set(dir(bool))
for n in ['__sizeof__','__hash__']:
    rem.remove(n)
    bool_methods=bool_methods+f'''
    def {n}(self)->int:
        return self.value().{n}()'''
for n in ['__gt__', '__lt__', '__le__', '__ge__']:
    rem.remove(n)
    bool_methods=bool_methods+f'''
    def {n}(self,other:Self)->bool:
        return self.value().{n}(other.value())'''
for n in ['__and__', '__or__','__xor__']:
    rem.remove(n)
    bool_methods=bool_methods+f'''
    def {n}(self,other:Self)->Self:
        if type(other) is not type(self):
            return NotImplemented
        return self.__class__(self.value().{n}(other.value()))'''
if 'is_integer' in rem: rem.remove('is_integer') # python 3.12 and above
for n in []:
    rem.remove(n)
    # i functions not implemented or hand-coded
if '__getstate__' in rem: rem.remove('__getstate__')  # python 3.11 and above
if '__setformat__' in rem: rem.remove('__setformat__')  # python 3.10
assert rem=={'__rrshift__', '__lshift__', '__sub__', '__int__', '__getattribute__', '__invert__', '__divmod__', '__radd__', 'imag', '__bool__', '__ceil__', '__str__', '__floor__', '__rmul__', '__subclasshook__', '__pow__', '__reduce__', 'denominator', '__truediv__', '__eq__', '__getnewargs__', '__trunc__', 'as_integer_ratio', '__abs__', '__add__', 'to_bytes', '__format__', 'bit_count', '__mul__', '__dir__', '__round__', '__delattr__', '__rlshift__', '__rand__', '__class__', 'bit_length', 'from_bytes', 'conjugate', '__ne__', '__new__', '__rmod__', '__rtruediv__', '__rfloordiv__', '__repr__', '__rpow__', '__index__', '__rdivmod__', '__init_subclass__', '__float__', '__reduce_ex__', '__mod__', '__doc__', 'numerator', '__rsub__', 'real', '__setattr__', '__ror__', '__neg__', '__pos__', '__rxor__', '__init__', '__rshift__', '__floordiv__'},rem
print(open(sys.argv[1]).read().replace('# generated Int methods here...',int_methods).replace(
    '# generated Str methods here...',str_methods).replace(
    '# generated Float methods here...',float_methods).replace(
    '# generated Bool methods here...',bool_methods))

%json_codec_typescript_test==()+cmd=(%json_codec_typescript_test.sh) (%json_codec_typescript_test_ts)+need=(%json_codec_typescript_test_ts/json_codec_typescript_test.ts):exec.output

%json_codec_typescript_test_ts==(make-json-codec-ts-test+(%py-opts):py3.exec.output)+cmd=cat '>json_codec_typescript_test.ts':output

%json_codec_typescript_test.sh==!<<
#!/bin/sh
set -e
/home/xju/node_modules/typescript/bin/tsc --lib es2015 --strict "$1/json_codec_typescript_test.ts" --outFile json_codec_typescript_test.js
node json_codec_typescript_test.js


# run unit tests against pip-installed code rather than local source
%pytest-v-installed==%pytest-v-installed.tree:leaves

%pytest-v-installed.tree==<<
%installed-py-test.cov
cmc%pytest-v-installed

# run unit tests against pip-installed code rather than local source
%installed-py-test.cov==%py-unit-tests-v-installed.tree:leaves:py3.cov.list:agg.py3.cov

%py-unit-tests-v-installed.tree==<<
assert_.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
cmd.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
jsonschema.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
json_codec.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
misc.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
patch.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
pq.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
rfc2616.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
xn.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
newtype.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
time.py.test+mypy_plugin_mod='xju.json_codec_mypy_plugin'+mypy_plugin_mod='xju.cmc_mypy_plugin':py3.exec.cov
