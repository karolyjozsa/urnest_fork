- use inotify
  x up front, create inotify fd
  x where does odin call stat? Get_FileInfo in if-file.c
    there, add directory of that file to inotify set
  x pull from inotify in select loop and do equiv of !:test
    ... how to simulate that?
    break in Local_Get_Odinfile and maybe do what it does?
    for odin 'odin/xju-odin/pkg/ogin/if-ipc.c!:test':
      ... get it has "pushed client" ... maybe we don't need
      maybe there is a default/builtin client?
      then
918	         Set_KeepGoing_Msg(IPC_AbortPtr);
925	         Set_ErrLevel_Msg(IPC_AbortPtr);
932	         Set_WarnLevel_Msg(IPC_AbortPtr);
939	         Set_LogLevel_Msg(IPC_AbortPtr);
946	         Set_HelpLevel_Msg(IPC_AbortPtr);
960	         Set_MaxJobs_Msg(IPC_AbortPtr);
855	         Do_Alias_Msg(IPC_AbortPtr);  /home/xju/tmp/oc122/xjutv ForceFlag 0
  245	   Local_Do_Alias(FileName, ForceFlag);
855	         Do_Alias_Msg(IPC_AbortPtr); /home/xju\000tmp/oc122/xjutv
Set_KeepGoing_Msg (IPC_AbortPtr=0x7ffceb0ff7a4) at stub-in.c:438 Flag = 1
862	         Get_Alias_Msg(IPC_AbortPtr); /home/xju\000tmp/oc122/xjutv
897	         Set_CWD_Msg(IPC_AbortPtr);
883	         Test_All_Msg(IPC_AbortPtr);
883	         Test_All_Msg(IPC_AbortPtr);
974	         OdinExpr_ID_Msg(IPC_AbortPtr);odin/xju-odin/pkg/odin/if-ipc.c
876	         Test_Msg(IPC_AbortPtr); odin/xju-odin/pkg/odin/if-ipc.c
301	   Local_Test(FileName);


      
      IPC_Get_Msg -> IPC_Get_Msg -> IPC_Do_Msg -> Get_OdinFile_Msg
      -> Local_Get_Odinfile
      (gdb) p OdinExpr
$2 = "odin/xju-odin/pkg/odin/if-ipc.c\0000
         break in that
  - where does odin do select?
    c_main -> IPC_Get_Commands in if-ipc.c
  - where is VERIFY_LEVEL stored? only enable inotify if VERIFY_LEVEL == 1
    if-inotify.h
       int Create_InotifyFd();
       void Inotify_Watch_File(FileName tp_FileName);
       char const* Inotify_Get_Next_Change(); // not thread safe
     
- get dg.exe to escape "s in help strings then remove \\s from 
  hcp, java, run, py

- re-design update algorithm, because it is pretty brain-dead and
  tends to go over and over the same checks many times unnecssarily
  (ODINLOGLEVEL=7 gives *massive* output even if nothing needs to be updated.
  If nothing needs to be updated we should visit every node exactly once.

  see ../../dion
  
- merge xjupkg into pkg
  - add missing version files (recover and bump version if old package had version)
  - bump versions of changed packages
  x verify build and install odin from scratch
  - test eli

- fedora rpm
  x add bild-rpm.sh
  x test instalation
  x figure out why .src.rpm only has xju-odin.spec
  ~ add code to get version from git tag
  ~ sign with what cert? where to get one of those?
  ~ publish on github?
  - upload source tarball package to github so can be fetched
    - use git tag for versioning
    - version like gcc-c++-11.2.1-1.fc35.x86_64.rpm
      ... the tag would be 11.2.1, the -1 etc would be added by fedora
  - adjust spec file to work from that using Source and
    %prep
      %setup -q
  - look into becoming fedora package maintainer for xju-odin


~ pdflatex package that runs pdflatex until output stable
  (otherwise tocs and cross references aren't correct)
  use that for manual

x produce pdf manual instead of postscript
  x produce manual
  x get TOC and xrefs to work as pdf links

~ fix hash_inc to make sure it includes intermediate directories
  ~ need a test that fails first (added a test and it did not fail,
    because intermediate dirs become inputs - see misc-test/test-6.sh)
  
- fix race condition when immediately re-invoking odin without
  explicit server, handle and document two use cases:
  - explicit server, where user must ensure server is not stopped/started
    while clients are active
  - on-the-fly server, where the client that forks server waits for it
    exit completely before exiting (to avoid race conditions in scripts
    that have strings of odin invocations)
  ... or if possible make client keep trying till it either gets the
  server role or contacts the server.
  
- make sure ctrl-c on client+server does not result in out-of-sync

- make sure machine shutdown while odin server running does not
  result in out-of-sync
  
- add :dirlist derivation which combines ls + targets of Odinfile
  ... not sure why we would want that?

- add :asdir => :DIRECTORY built-in that produces self after verifying
  it is a directory so can do :dirtree without evaluating virtual
  directory files, or is there a better solution? Is a VIRTUAL-DIRECTORY
  a DIRECTORY too? (:asdir could be used with :filter in dirtree.db?)
  I don't think :filter=:DIRECTORY works? That will invoke :dir on anything?
  Test it.

- fix +ignore handling in hash_inc.sh

- add +stdin to :exec / :py.exec
x add +stderr=error to :exec / :py.exec so can capture stderr
  and display it as error messages in :exec.output / :exec.files

~ might be able to put back :cast_hash_incable (not worth it)
  - instead, discuss :cpp scalability issue

- hcp-tags package
  x rework so steps are:
    :FILE => :dir_taggable;
    :taggable => :filetags;
    :dir_taggable:map=:filetags => dir_file_tags;
    EXEC (merge.sh) (:dir_file_tags:ls) NEED (:dir_file_tags) => :dir_tags;
  x ... so that do minimal re-parsing (which is slow)
  - rework hcp-tags-merge.sh to read list of input files on stdin to avoid
    command line too long; give verbose flag to make it report progress to
    stdout; give it output file name as single arg
  
- don't hard-code which path, and test for which separately, eg ld.sh

- extract_dir:
  - if no files, extract all
  - extracted is directory -> error
  - extracted is soft-link -> warning+ignore
- add :cast.tree

- catch malformed in vir_tree.py (eg leading /)

- too many files executable

- resource temporarily unavailable (cygwin)

- :sm.hash_inc_all (?)

- allow :LIST as EXEC tool param, being shorthand for :LIST:ls +need=:LIST

- doc, specific:
  - 2.2.3 ref to xjupkg tree support
  - replace 3.4:
    x much simpler to just use odin 'test-hello!gdb'
    - provide a reference to using xjupkg to run and debug unit tests,
      including a discussion of environments
  - 4.3 add %stuff.tar!tar tf
  ~ 4.4 ~ name -> ~name (latex broken)
  x A.3 "the dependency path" -> "a dependency path"
  x B.1 explain how package loading works:
      odin -R installs tool packages into the cache that command creates, and
      lists the packages that it loads. By default, odin -R loads
      packages from odin's install directory e.g. /usr/lib/Odin, but you
      can load packages from other directories using ODINPKG environment
      variable.
      ODINPKG is a colon-separated list of directories to search, and
      odin looks for a PKGLST file in each of these in turn. From each
      directory it loads the packages listed for that directory, but
      it does not load "duplicate" packages, eg where a PKGLST file specifies
      package X, but package X has already been loaded via a PKGLST from
      a directory earlier in the ODINPKG directory.
      You can therefor "replace" standard odin packages with your own
      package of the same name.
      Note that although you cannot tell odin not to load a particular
      standard package, you can achieve the affect by creating your
      own package of the same name with an empty .dg file.
  x B.1 note that the standard odin packages are not documented here,
      even though the tutorial makes use of them; browse the .dg files
      to see the capabilities of the standard odin packages. Also look
      for others' Odinfile use (including in the odin distribution).
  - B.4 "rare circumstance" example (use FILE:exec.output v 
      FILE:java.exec.output) except that I can't remember why
      that is one.
      
  x B.7.7 provide some discussion: when is this useful for example?

- add more explanations/examples in doc, doc more of the semantics
  of eg param handling (ordering, propogation); include more
  examples (actually it is in the doc already)

- add ODINPKGLIST allowing explicit list of package names to load,
  as list of directories (allowing bash expansion), or maybe let PKGLST
  specify .dg files explicitly as well as directories.

- :LIST +path=(x/y/z):subdir => vir_tree.spec
  ie make a vir_tree.spec placing listed files in the x/y/z subdirectory
  (produces a spec so that can combine multiple of these statements via :cat)

- :DIRECTORY :find deriv could take a real find expression and
  apply it recursively (adding maxdepth=1 at each level)
  only need to note that nested virtual directories tend to be soft
  links rather than actual directories (could translate the find
  expression to account for this?)

x what does <:src> mean? doc is incomprehensible to me
  - 1 for source types, eg:
      :x => :FILE;
      :xa => :x;
      :xb => :x;
      *.xa => :xa;
      *.xb => :xb;
      :y => :FILE;
      :ya => :y;
      :yb => :y;

      EXEC /bin/cp (:xa) 'ya' => (:ya);
      EXEC /bin/cp (:xb) 'yb' => (:yb);

      - what does DG look like?
        equiv from xa to x
        equiv from x to xa
        equiv from xb to x
        equiv from x to xb
        equiv from ya to y
        equiv from y to ya
        equiv from yb to y
        equiv from y to yb

      - can I do 1.xa :yb (which would be the case if :xa is really
        equivalent to :xb)?

       NO. equiv is one-way, like cast, see DG.log bottom

x can't have :hash_inc work off FILE, because everything is a file, eg
  cxx*:exe which uses +define etc
  - define a :hash_incable and make selected file types hash_incable, eg:
    :cxx :c :h :idl
    (note :h is defined in cxx_impl)
    :idl not defined

- update vanilla odin packages:
  x add hash_inc
  x make :IDL and :h hash_incable
  x find all the vanilla packages
    that use :all_c_inc and its clones (eg cpp.dg) and point them
    at :hash_inc_all, or replace them with xju packages
        x code
        x cc
        x cpp
        x cxx
        x odi
        x f77
        x lex
        x yacc
        x idl
        x prof
        x lint
        x misc
        x roff
        x tex
        x dbx
        x run
  - update cpp hash_inc to current behaviour (no +home)
  ~ move my "stable" packages into odin-1.17.10x/pkg and document
    them in the manual
    - actually, put my packages in xjupkg and have doc point to
      where they are documented (eg Annex of manual), 
      x move pkg to xjupkg
      x reinstate vanilla pkg, careful not to clobber my necessary
        changes eg to odin package, dg package, others?
      - update odin.tex

x cc
x code
x config (not copied to xjupkg)
cpp
cxx
dbx
dg
f77
hash_inc
idl
lex
lint
misc
odi
odin
PKGLST
prof
roff
run
tex
tregrm
vc
yacc
PKGLST
        
      - test configure and INSTALL
      - adjust INSTALL to install xjupkg, add odin --xjupkg option
        to use those instead of vanilla
      - confidence check
      - add a configure option to make them the default
      - continue with list of merges above (to eventualy get rid of
        my odin/pkg directory
      - add -ptr check to configure
    - put vanilla odin packages back to retain compatibility
      with existing users (then my changes are more likely to be
      merged back into vanilla odin)
    - note in odin manual tutorial any differences

  - make cxx/cc package link via .a to avoid name shortening silliness
    (like cxx)

  - adjust cpp use of all_c_inc - no +home

~ add x to all package versions where package is now non-vanilla

- idl package:
  .idl.sm -> .idl.h.list or virdir or something
  .idl.sm -> .idl.cxx.sm
  ... so that can generate all headers then
  put them into a virtual subtree for relative path includes
  - this aligns with having several .idl files in each directory

- separate omniidl / taoidl packages that know about the generation
  style? Yes I think so.

- odin shell script:
  x say "installing Tool Package x/y/y.dg" to tie in with odin manual and
    lead user to the .dg file rather than just a directory full of files
  - allow finer control over package list, eg explicitly list .dg files
    to load (ODINPKGLIST) and/or explicitly exclude packages by name
    ODINPKGSKIP
  - group packages into "boot" (those needed to INSTALL), "core" (those
    needed to run) and the rest (perhaps just as documentation alongside
    ODINPKGLIST)
  - update emacs integration, and give a discussion (files in etc)
    - note emacs integration has a deadlock when saving file while
      compiling
  - check environment control, does odin pass through calling process'
    eg PATH, LD_LIBRARY_PATH ... yes it does... what to do?
    - idea is that environment is controlled, repeatable, predictable
    - ! needs display, how to do that?

- odin packages are self-documenting but need cookbook/tutorial/example
  information somewhere (odin/example directory?), needs to be searchable
  ie indexed by google (eg blog posts)

- add scp to misc package
- add gdb package like dbx? Just delete dbx - can do
  (.)+cmd=gdb (%exe) :run!
- rewrite idl to allow a idl.sm :cxx.sm and idl.sm :cxxheaders (which 
  produces a vir_dir with all headers generated from idl compile)
  - and idl.sm :py.sm, :c.sm
  .. or maybe write an omniorb package, since that is direct and would
     allow anyone to use as basis for their own
  (in fact that might be a good way to go in general, instead of
   cxx trying to cope with all compilers, just have a gcc package,
   a vc package etc... downside it would hard to use them both in
   same cache - unless perhaps have .vcxx.sm, .gcxx.sm etc

x some internals:
  Get_OdinFile_Msg is where server side picks up the command to do.
  For a basic derivation eg xxx:yyy, end up in Local_Get_Odinfile("xxx:yyy")
    parses xxx:yyy into Nod, which is a tree:
       type-8 (DRVFIL - from if-candrv.c)
        |son
       type-23 (WORD) -brother- type-14
        - sym "xxx"        |son
                         type-23
                          -sym "yyy"

  Finds the corresponding PrmFHdr (node in derived/source file tree)
    uses HostFN_FileHdr to find the tree node for "xxx" (starting with
      the already-known current-working-drectory tree node then using
      Do_Keys)
    that gets us a tps_FilHdr, then Apply_OprNods, which uses
      Do_Deriv
        GetDrvPath
        Do_DrvPath
     (DrvPath stands for "derivation path")

    Set_Client_FilHdr - only sets CurrentClient->FilHdr

  How does it get cwd node? Set_CWD_Msg(IPC_AbortPtr) -> Local_Set_CWD
  	   FilHdr = HostFN_FilHdr(FileName);

    
  Doing an update:
    Above sets CurrentClient->FilHdr and if-client.cc:ServerAction
    gets invoked repeatedly to do it, which essentially does Push_AllReqs
    and Do_1ToDo repeatedly until request is satisfied.
      Push_AllReqs increments CurrentDate (and sets PendingDate to match.
        - what are these?
      Push_AllReqs:
        Gets all reqs of CurrentClient->FilHdr (GetAllReqs). With IK_Trans, what does?
	Get all reqs of Pending list.
	  Both use GetAllReqs
	    - only collects req where it is not "up to date" (IsUpToDate), (up to date
	      means its VerifyDate >= (desired)VerifyDate and
	      its target value is up to date (REVISIT) and
	          not in pending, ready or busy state and
	          not pending flag set and
	        ... unless its VerifyDate == current VerifyDate
	      and its status is known (i.e. not STAT_Unknown))
            - if req is ready or busy it goes straight onto ToDo and
	      its verify date is set to current date and its pending flag is cleared
	      Why bother? It would work out to go via pending?
	    - if source file updates on-the-fly, meaning simplisticly
	      checking if file has changed since last looked (fstat mod time has
	      changed or we have never looked); if so record new mod time, increments
	      CurrentDate (why?) and sets ModDate = CurrentDate (why ModDate and not
	      VerifyDate?). I guess the inc CurrenDate is because of above setting
	      VerifyDate to current date? Arrg I don't think that makes sense? REVISIT
	      I guess it's to ensure that it ends up newer than anything that depends
	      on it (otherwise it will look like file derived from old value is
	      up to date w.r.t new value).
	      (The whole date scheme could be simpler?)
	        source file can also be target, I think that's where TgtVal comes in?)
		see IsTgtValUpToDate for example.
		If tgt val is not up to date (like "up to date" above.) it
		does GetReqs on it and if status is Unknown then pushes tgv val
		onto pending with IK_Simple.
	      Sets verify date to current date.
	    - if not source... REVISIT

... so break at if-get.c:83 and see what it does. Does it push tgtval to ToDo or
pending? (Maybe instrument so we can see from trace.)
		

	      
x best way to debug:
  odin -s
    x starts server process
  in another window ps -ef | grep odin
    x shows one server process
  in emacs, gdb attaching to that process
  b Local_Get_OdinFile

  in odin -s window:
    dir=/data/xju/tmp
    f1.x+a=1+b=2:y
    ... should hit the breakpoint

    
x step/next to get to this point:
#0  Do_Deriv (FilHdr=0x9469948, InhFilPrm=0x9468bc8, PrecFilPrm=0x946c8e0, ToFilTyp=0x9451cb8) at if-candrv.c:181
#1  0x0804bd42 in Apply_OprNods (FilHdr=0x9469948, FilPrm=0x946c8e0, OprNod=0x946b3a8) at if-candrv.c:548
#2  0x0804c123 in Nod_PrmFHdr (Nod=0x946b3c0) at if-candrv.c:641
#3  0x0804c5d9 in Local_Get_OdinFile (OdinExpr=0xbf8a8fd8 "f1.x +a=1 +b=2 :y", NeedsData=0) at if-candrv.c:787

x at this point:
    FilHdr represents the host file f1.x
    InhFilPrm is head of list of params
    PrecFilPrm is tail of list of params
    the list is ->Son->Son...

  ... which can be seen by:
(gdb) p (*(*(*RootFilPrm).Son).PrmTyp)
$25 = {PTName = 0x9466480 "a", Desc = 0x9466490 "param a", HelpLevel = 2, FilTyp = 0x9451718, RootLocPVal = 3848, StrDirLocHdr = 3574, Mark = 0, IPrmTyp = 4}
(gdb) p (*(*(*(*RootFilPrm).Son).Son).PrmTyp)
$26 = {PTName = 0x94664a0 "b", Desc = 0x94664b0 "param b", HelpLevel = 2, FilTyp = 0x9451718, RootLocPVal = 4158, StrDirLocHdr = 3884, Mark = 0, IPrmTyp = 5}

... and we can step through to:

148			  DrvFilPrm = Strip_FilPrm(FilPrm, PrmTypLst); };}/*select*

... and I reckon this will take a+b (in FilPrm) and reduce that to just a.

... more interesting would be a bit before, where we get PrmTypLst:

	    PrmTypLst = DrvPth_PrmTypLst(DrvPthElm);



with map, derivations are much more complicated:

=> f.x.sm+a=1+b=1:y.sm.list
** Generating /data/xju/tmp/f.x.sm +a=1 +b=1 :x*y.sm.list
** Generating /data/xju/tmp :odin*targets_ptr
** Generating /data/xju/tmp/Odinfile :odin*targets_ptr
** Generating /data/xju/tmp :odin*act_tgt.list
** Generating /data/xju/tmp/f.x.sm :x*x.sm.list
** Generating /data/xju/tmp/f.x.sm :x*x.sm.list +a=1 +b=1 :map=:y
** Generating /data/xju/tmp/ocnopkg/xjutv/PKGS/x :odin*targets_ptr
** Generating /data/xju/tmp/ocnopkg/xjutv/PKGS/x/Odinfile :odin*targets_ptr
** Generating /data/xju/tmp/ocnopkg/xjutv/PKGS/x :odin*act_tgt.list
** Generating /data/xju/tmp/ocnopkg/xjutv/PRM +a=1 :odin*prm_values
** Generating /data/xju/tmp/ocnopkg/xjutv/PRM +a=1 :odin*prm_values :odin*ls
** Generating /data/xju/tmp/f1.x +a=1 :x*y
** Executing : '/data/xju/tmp/ocnopkg/xjutv/PKGS/x/y.sh' '/data/xju/tmp/f1.x' '/data/xju/tmp/ocnopkg/xjutv/FILES/PRM.6871.ls'
=> f.x.sm+a=1+b=1:y.sm.list+depend=f.x.sm!:dpath
=> f.x.sm+a=1+b=1:y.sm.list+depend=(f.x.sm)!:dpath
2654    - /data/xju/tmp/f.x.sm
   is an input of:
3768    - /data/xju/tmp/f.x.sm :x*x.sm.list
   is an input of:
4136    - /data/xju/tmp/f.x.sm :x*x.sm.list +a=1 +b=1 :map=:y
   is an element of:
3932    - /data/xju/tmp/f.x.sm +a=1 +b=1 :x*y.sm.list


... and the initial Do_Deriv is short, but it gets called again a few times

eventually one has Make_MapLocElm in it, which might be interesting,

(gdb) up
#4  0x0804c574 in Make_MapLocElm (FilHdr=0x932cc18, ListFilHdr=0x932ce28) at if-candrv.c:764
... but it has already spat out:
** Generating /data/xju/tmp/f.x.sm :x*x.sm.list +a=1 +b=1 :map=:y
... so has already decided that :map=:y needs both params


x cpp.dg looks like might cause trouble, based on DG.log in the $ODIN cache,
at least I will remove the gmc.cpp deriv since it uses +define in a
derivation that produces a GENERIC ... but that doesn't fix the original problem (it might be part of the fix)

In this stack trace:

bt
#0  Do_Deriv (FilHdr=0x99f7708, InhFilPrm=0x99f8328, PrecFilPrm=0x99f3f98, ToFilTyp=0x99dcf40) at if-candrv.c:181
#1  0x0805ee48 in Do_InpSpc (BaseFilHdr=0x99f7708, InhFilPrm=0x99f8328, InpSpc=0x99e9970, Tool=0x99e38f8) at if-filinp.c:569
#2  0x0805f0c4 in Get_LocInp (FilHdr=0x99f8358) at if-filinp.c:637
#3  0x08059736 in Insert_FilHdr (BaseFilHdr=0x99f7708, FKind=8, FilTyp=0x99dcef8, FilPrm=0x99f8328, Ident=0x0) at if-fhnew.c:87
#4  0x080599bf in Extend_FilHdr (BaseFilHdr=0x99f7708, FKind=8, FilTyp=0x99dcef8, FilPrm=0x99f8328, IdentStr=0x0) at if-fhnew.c:147
#5  0x08059a3a in Get_Drv (BaseFilHdr=0x99f7708, FKind=8, FilTyp=0x99dcef8, FilPrm=0x99f8328, Ident=0x0) at if-fhnew.c:174
#6  0x0804b0a9 in Do_DrvPth (FilHdr=0x99f7708, InhFilPrm=0x99f3f98, PrecFilPrm=0x99f8328, DrvPth=0x99f7648) at if-candrv.c:155
#7  0x0804b1e5 in Do_Deriv (FilHdr=0x99f7708, InhFilPrm=0x99f3f98, PrecFilPrm=0x99f8328, ToFilTyp=0x99dcd90) at if-candrv.c:197
#8  0x0804bd42 in Apply_OprNods (FilHdr=0x99f7708, FilPrm=0x99f8328, OprNod=0x99f8058) at if-candrv.c:548
#9  0x0804c123 in Nod_PrmFHdr (Nod=0x99f8070) at if-candrv.c:641
#10 0x0804c5d9 in Local_Get_OdinFile (OdinExpr=0xbfd67a68 "/data/xju/tmp/f.x.sm :x*x.sm.list +a=1 +b=2 :y.sm.list", NeedsData=0) at if-candrv.c:787
#11 0x08074db3 in Get_OdinFile (FileName=0xbfd6799c "", StatusPtr=0xbfd67a64, ExecFlagPtr=0xbfd67998, OdinExpr=0xbfd67a68 "/data/xju/tmp/f.x.sm :x*x.sm.list +a=1 +b=2 :y.sm.list", NeedsData=0) at stub-out.c:529
#12 0x0804e3ee in Do_ShowStatus (AbortPtr=0xbfd693d8, Root=0x99f62d0) at if-cmd.c:253
#13 0x0804f1cd in Do_Command (AbortPtr=0xbfd693d8, Root=0x99f62d0, Interactive=1) at if-cmd.c:585
#14 0x0804f3fa in CommandInterpreter (AbortPtr=0xbfd693d8, Root=0x99f62d0, Interactive=1) at if-cmd.c:646
#15 0x08069770 in TopLevelCI (AbortPtr=0xbfd693d8, Str=0xbfd6870c "/data/xju/tmp/f.x.sm :x*x.sm.list +a=1+b=2:y.sm.list") at if-main.c:47
#16 0x08067439 in IPC_Get_Commands (AbortPtr=0xbfd693d8, Prompt=0x807d3fe "=> ") at if-ipc.c:489
#17 0x080697df in Get_Commands (AbortPtr=0xbfd693d8) at if-main.c:66
#18 0x08069921 in main (argc=2, argv=0xbfd69494) at if-main.c:120
(gdb) 

at #1:

	    FilHdr = Do_Deriv(FilHdr, InhFilPrm, PrecFilPrm, OpInpSpc->FilTyp);

... we have InhFilPrm+PrecFilPrm is a list of +a=1+b=1
OpInpSpc->FilTyp->FTName is "map"
OpInpSpc->FilTyp->ArgFilTyp->FTName is "y"
... that looks like what we're interested in (+a=1+b=1:map=:y)

... we then do Get_DrvPth and then move on to Do_DrvPth:

#0  Do_DrvPth (FilHdr=0x99f7708, InhFilPrm=0x99f8328, PrecFilPrm=0x99f3f98, DrvPth=0x99f7668) at if-candrv.c:140

... and it does the usual and calls:
DrvPth_PrmTypLst
... which chooses:
   if (DrvEdg != NIL) {
      return DrvEdg_PrmTypLst(DrvEdg); }/*if*/;

... but DrvEdg_PrmTypLst returns 0x0 as the PrmTypLst?

... when we get back to Do_DrvPth we choose:
	       if (IsGroupingInput_FilTyp(FilTyp)) {
		  DrvFilPrm = FilPrm;

... and we don't use the PrmTypLst, instead we go straight to:
	    FilHdr = Get_Drv(FilHdr, FKind, FilTyp, DrvFilPrm, DfltIdent);
... with:
FilTyp is our :map=:y
DrvFilPrm is end of our +a=1+b=1 list


x alas there is no function to find all the drvpths that lead to y (such as would
allow us to collect up all the applicable parameter types)

x obviously the info is in the graph, but on the surface it would appear tricky
  to build one... perhaps not: DG.log spits out all possible
  derivations, which should allow us to build our own "reverse" graph, either
  on-the-fly when loading DG or save to DG (or another file even)

x in DG.log there is an explicit map=:xy entry (which shows what can
  be derived from map=:xy)
x in DG.log there is a OBJECT -> map=:xy listed, and it has
  no attached params: we want to fill in the params
x all -> map=* entries have OBJECT as their source type (I would have
  expected LIST? Should not make any difference.)
x can see in dg-filtyp.c where it prints 'Possible Derivations :' then
  loops through each, and it will be the DrvEdg that has the -> map=:xy
x DrvEdg.h has tps_DrvEdg which has:
    tp_FilTyp FilTyp
    tp_PrmTypLst PrmTypLst (0x0 for map FilTyp see above)

  for map FilType.Tool->TClass==TC_Map

  FilType ":xy" is represented as tp_FilTyp ArgFilTyp and so will always be
  a single type (ie :xy never :z:xy) I think. And the ArgFilTyp.FTName should be
  ":xy".

  x want to adjust PrmTypLst just before writing out DG / DG.log (and before
    dumping 'Possible Derivations):

    dg-main.c calls a Make_PrmTypLsts, perhaps should adjust that?
      it is in dg-analyze.c
      - yes, add a step at the end, perhaps call it 
        void Set_TC_Map_DrvEdg_PrmTypLst(tp_FilTyp FilTyp)
        ... assuming that reverse mappings has been pre-built, eg by
        Build_TC_Map_PrmTypLst_Info(tp_FilTyp begin)
           - which would build from drv, eqv and cast edges (see dg-filtyp.c
             Print_Info for how to go through those)

  x test that:
    x figure out which dg.exe is used to create cache
    x update it
    x create cache
    x step through above code and see if DrvEdg_PrmTypLst returns 0x0
      (see above)

  x then just need to adjust Do_DrvPth (see above)

... after adjustment, get following, note difference in Generating...:map=:xy line, it now does not mention b, so I think we've won:

=>  f.x.sm+a=1+b=2:xy.sm.list
** Generating /data/xju/tmp/f.x.sm +a=1 +b=2 :x*xy.sm.list
** Generating /data/xju/tmp :odin*targets_ptr
** Generating /data/xju/tmp/Odinfile :odin*targets_ptr
** Generating /data/xju/tmp :odin*act_tgt.list
** Generating /data/xju/tmp/f.x.sm :x*x.sm.list
** Generating /data/xju/tmp/f.x.sm :x*x.sm.list +a=1 :map=:xy
** Generating /data/xju/tmp/ocnopkg/xjutv/PKGS/x :odin*targets_ptr
** Generating /data/xju/tmp/ocnopkg/xjutv/PKGS/x/Odinfile :odin*targets_ptr
** Generating /data/xju/tmp/ocnopkg/xjutv/PKGS/x :odin*act_tgt.list
** Generating /data/xju/tmp/ocnopkg/xjutv/PRM +a=1 :odin*prm_values
** Generating /data/xju/tmp/ocnopkg/xjutv/PRM +a=1 :odin*prm_values :odin*ls
** Generating /data/xju/tmp/f1.x +a=1 :x*xy
** Executing : '/data/xju/tmp/ocnopkg/xjutv/PKGS/x/y.sh' '/data/xju/tmp/f1.x' '/data/xju/tmp/ocnopkg/xjutv/FILES/PRM.6871.ls'
=> 

- a confidence check:

xju@xjutv:~/urnest/odin/odin-1.17.10x$ ./configure  && ./CLEAN && ./INSTALL ~/u1 && PATH=~/u1/bin:$PATH ../create-linux-cache.sh ~/tmp/u1c && ODIN=~/tmp/u1c ~/u1/bin/odin pkg/cpp%test1 && ODIN=~/tmp/u1c ~/u1/bin/odin ../../xju%run-standalone-tests && ODIN=~/tmp/u1c ~/u1/bin/odin xjupkg%run-all-tests

- before I did:

xju@xjutv:/data/xju/u1/urnest/odin/odin-1.17.10x$ git commit -m 'avoid inappropriate use of java :output' -a
[master 5f21a62] avoid inappropriate use of java :output
 1 files changed, 4 insertions(+), 4 deletions(-)

... why did it:

--- <() +cmd=(/data/xju/u1/urnest/xju/Odinfile%test-stringToTime.cxx.sm +(/data/xju/u1/urnest%cxx-opts) :exe) :java*java.stdout*composite> generated errors ---
Exception in thread "main" java.lang.NoClassDefFoundError: .data.xju.tmp.u1c.xjutv.FILES.a.none.hh.205404.exe
   at gnu.java.lang.MainThread.run(libgcj.so.10)
Caused by: java.lang.ClassNotFoundException: .data.xju.tmp.u1c.xjutv.FILES.a.none.hh.205404.exe not found in gnu.gcj.runtime.SystemClassLoader{urls=[file:/data/xju/tmp/u1c/classes/], parent=gnu.gcj.runtime.ExtensionClassLoader{urls=[], parent=null}}
   at java.net.URLClassLoader.findClass(libgcj.so.10)
   at gnu.gcj.runtime.SystemClassLoader.findClass(libgcj.so.10)
   at java.lang.ClassLoader.loadClass(libgcj.so.10)
   at java.lang.ClassLoader.loadClass(libgcj.so.10)
   at gnu.java.lang.MainThread.run(libgcj.so.10)
java -cp /data/xju/tmp/u1c/classes /data/xju/tmp/u1c/xjutv/FILES/a/none.hh.205404.exe failed.


x optimise Exec_List, because a view spec tends to have repeated/redundent
info should be able to reduce recalculation
  X eg for case of if-execint.c line 135:
      case TC_ViewSpec: {
	 FORBIDDEN(ExecSpc->NumInps != 1 || ExecSpc->NumOuts != 1);
         Do_Log("{Exec_List(View_Spec)", FilHdr, LOGLEVEL_IntGenerate);
	 Exec_List(FilHdr, Inputs[0], RootFilPrm, FALSE);
         Do_Log("}Exec_List(View_Spec)", FilHdr, LOGLEVEL_IntGenerate);

  x set up test view spec:

    ODINVERIFYLEVEL=0 odin maxbuilds=4 'test.viewspec:view:ls>'
    /home/xju/tmp/test-viewspec/a/p
    /home/xju/tmp/test-viewspec/b/q
    /home/xju/tmp/test-viewspec/c/r
  
  x use gdb to figure out what Exec_List is doing

  x in Exec_List, parse first line to get DS_Nod = Nod:
      p *DS_Nod
  $8 = {NodTyp = 8, Sym = 0x0, Brother = 0x0, Son = 0x873ed90}
  (gdb) p *(*DS_Nod).Son
  $9 = {NodTyp = 23, Sym = 0x8742078, Brother = 0x0, Son = 0x0}
  (gdb) p *(*DS_Nod).Son.Sym
  $10 = {Str = 0x8742088 "a/p", Att = 0, Next = 0x0}
  (gdb) ... then go into 	 PrmFHdr = Nod_PrmFHdr(DS_Nod);
  
  DS_Nod is:
    Type DRVFIL
    Brother nil
    Son (RootNod):
      Type WORD
      Brother nil (OprNod)
      Sym 'a/p'
  
  down
  #0  Nod_PrmFHdr (Nod=0x8b7b188) at if-candrv.c:626
  (gdb) 
  
        case WORD: {
  	 FilHdr = HostFN_FilHdr(Sym_Str(Nod_Sym(RootNod)));
  
  -> if-fhnam.c 277
  
  	 FilHdr = Do_Keys(Top_CWDFilHdr(), strcpy(Key, FileName)); };}/*select*/;
     return FilHdr;
  
  ... back in Nod_PrmFHdr:
  
     return Apply_OprNods(FilHdr, RootFilPrm, OprNod);
     RootFilPrm is global
  
  for the "='xxx'" line:
  p Str
  $18 = (tp_Str) 0xbf9e0674 "=''"
  (gdb) p DS_Nod
  $19 = (tp_Nod) 0x8b7b1b0
  (gdb) p (*DS_Nod)
  $20 = {NodTyp = 8, Sym = 0x0, Brother = 0x0, Son = 0x8b7b150}
  (gdb) p (*(*DS_Nod).Son)
  $21 = {NodTyp = 21, Sym = 0x0, Brother = 0x0, Son = 0x8b7b188}
  (gdb) 


x how does max builds work? It seems like maybe if I have maxbuilds=4
  it kicks off 4 e.g. compiles then waits for those 4 to finish before
  kicking off any more? Sometimes.

  x where in code is maxbuilds used? Might be quicker or interesting too.

    if-ipc.c IPC_Get_Commands loop catches SIGCHILD, calls ChildAction
    calls if-build.c Build_Done calls Job_Done calls Local_Job_Done

    if-exec.c Local_Job_Done sets IsAny_ReadyServerAction and decrements
    if-client.c Client->NumJobs in Del_Job

    if-ipc.c IPC_Get_Commands sees IsAny_ReadyServerAction, calls
    if-client.c ServerAction calls Do_ToDo calls Do_1ToDo
    Do_1ToDo calls Exec on jobs till NumJobs == MaxJobs
    if-exec.c Exec calls Add_Job, which incs NumJobs

  ... it looks like it should work but I think the devil is in the
  (Do_ToDo v PushAllReqs) detail.

  x review refactoring
  x use it for a while
  x figure out what pending is about
  x only call Push_AllReqs in ServerAction and
    make ServerAction be:
      Push_AllReqs
      if (!AllUpToDate()){
        LaunchSome();
	return False;
      }
      return False;
- make pending use a stack variable not global, use C++ vector
- make MaxJobs and NumJobs global (i.e. per server)
- make client a C++ class, get rid of CurrentClient (always pass)
  - build all as C++
  - remove extern "C"
- fix up LastToDo:
  make ToDo a vector, LastToDo an index, then LaunchSome becomes:
    size_t const StartAt(LastToDo);
    for(size_t i=0; i!=ToDo.size(); ++i){
      LastToDo=(StartAt+i)%ToDo.size();
      xxx;
    }
    LastToDo=ToDo.size();
   ... and Push_ToDo always push_back(); never fiddle with LastToDo
   BUT it's more subtle than that I think.

get pkg/*/Odinfile targets to work, to make it easier to work on odin
internals
  - note that boot/default-dg.c covers all packages in pkg, so
    any changes to packages needs to regenerate that file
  - i.e. put it in "%all"
  - use cache created with environment of pkg/config/boot.sh when
    building those targets and do not load xjupkg
      x create a bin/odv930 to do that, note the good boot.sh gets
        installed in /home/xju/x-bin/lib/Odin/config/1.17.11/boot.sh
      
  - need way to build a test installation and use it without trashing
    the good odin install, do we only need to override which odin?


x IsAllDone v TgtVal
  x check IsAllUpToDate v TgtVal, has:
     if (!IsTgtValUpToDate(FilHdr)) {
        return FALSE; }/*if*/;
  x IsAllUpToDate calls that
  x so why does it not pick up tgtval? Because for STAT_Unknown tgt val
    GetFile sets FilHdr status to OK and pushes tgt val onto ToDo via Pending,
    so we're not all done until there is nothing still to do on ToDo.

  log /home/xju/urnest/odin/odin-1.17.10x/pkg/odin/boot :odin*act_tgt.list/default-dg.c +copy_dest=(\04868) :odin*copy ... analyse

- seems target of TgtVal is listed as a req of :copy that updates it. That
  does not make any sense and seems to introduce a cycle:
** 1632205292.845 { GetFile: get not-up-to-date /home/xju/urnest/odin/odin-1.17.10x/pkg/odin/boot/default-dg.c [OK@25/Unknown@62]
** 1632205292.845 { Get reqs of /home/xju/urnest/odin/odin-1.17.10x/pkg/odin/boot :odin*act_tgt.list/default-dg.c +copy_dest=(\04868) :odin*copy [Unknown@0/OK@0]
** 1632205292.845 { GetFile: get not-up-to-date /home/xju/urnest/odin/odin-1.17.10x/pkg/odin/boot :odin*act_tgt.list/default-dg.c +copy_dest=(\04868) :odin*copy [Unknown@0/OK@0]
** 1632205292.849 { Get reqs of /home/xju/urnest/odin/odin-1.17.10x/pkg/odin/boot/default-dg.c [OK@62/Unknown@62]
** 1632205292.849 { GetFile: get not-up-to-date /home/xju/urnest/odin/odin-1.17.10x/pkg/odin/boot/default-dg.c [OK@62/Unknown@62]
... but maybe the depenency is on the name only. Ajust trace to show that.
No, adjusted trace suggests it really is broken.


- refinement:
** 1632203016.599 {get not-up-to-date /home/xju/urnest/odin/odin-1.17.10x/pkg/odin/boot/Odinfile [OK/Unknown]
** 1632203046.535 { Get reqs of /home/xju/urnest/odin/odin-1.17.10x/pkg/odin/boot :odin*act_tgt.list [Unknown/OK]
... we can skip act_tgt.list as req of Odinfile because Odinfile cannot
generate itself.

